<?php

/**
 * @file
 * Provides a way to display blocks amongst the fields of entities.
 */

define('EBA_ALL_BUNDLES', '_eba_all_bundles_');

/**
 * Load all EBA configuration items.
 */
function eba_config_load_all() {
  $result = db_select('eba_config', 'eba')
    ->fields('eba', array())
    ->execute()
    ->fetchAll();
  foreach ($result as $row) {
    $row->bundles = unserialize($row->bundles);
  }
  return $result;
}

/**
 * Load an EBA configuration item.
 */
function eba_config_load($module, $delta) {
  $result = db_select('eba_config', 'eba')
    ->fields('eba', array())
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->execute()
    ->fetch();
  $result->bundles = unserialize($result->bundles);

  return $result;
}

/**
 * Save a single EBA configuration item.
 *
 * @param $config
 */
function eba_config_save($config) {
  if (is_object($config)) {
    $config = (array) $config;
  }

  db_merge('eba_config')
    ->key(array(
      'module' => $config['module'],
      'delta' => $config['delta'],
    ))
    ->fields(array_intersect_key($config, array_fill_keys(array(
      'respect_visibility',
      'bundles',
    ), TRUE)))
    ->execute();
}

/**
 * Delete an EBA configuration item.
 */
function eba_config_delete($module, $delta) {
  db_delete('eba_config')
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->execute();
}

/**
 * Implements hook_field_extra_fields().
 */
function eba_field_extra_fields() {
  $return = array();

  $blocks = eba_config_load_all();
  $bundles_info = field_info_bundles();
  foreach ($blocks as $block) {
    $block_info = module_invoke($block->module, 'block_info');

    foreach ($block->bundles as $entity_type => $block_bundles) {
      if (isset($bundles_info[$entity_type])) {
        if (!empty($block_bundles[EBA_ALL_BUNDLES])) {
          $block_bundles = array_keys($bundles_info[$entity_type]);
        }
        foreach ($block_bundles as $bundle) {
          if (isset($bundles_info[$entity_type][$bundle])) {
            $return[$entity_type][$bundle]['display']['eba_' . $block->module . '-' . $block->delta] = array(
              'label' => $block_info['info'],
              'description' => t(''),
              'weight' => isset($block_info['weight']) ? $block_info['weight'] : 30,
            );
          }
        }
      }
    }
  }

  return $return;
}

/**
 * Implements hook_entity_view_alter().
 *
 * This is a terrible, terrible hack that should not be necessary; taxonomy and
 * some other entity types use fields, but don't implement  hook_entity_view().
 * We have to ALTER those entity types after they're built. For the time being,
 * we'll use a list of special cases to trigger this special handling.
 *
 * @see eba_entity_view_alter()
 * @see https://drupal.org/files/1772204-d7-1.patch
 */
function eba_entity_view_alter(&$build, $entity_type) {
  $view_mode = $build['#view_mode'];

  // @TODO Check to make sure we have at least 1 block to display
  // @see eva_get_views().

  // If we've found an entity in the build array, gather field information.
  if ($entity = _eba_extract_entity_from_build($build, $entity_type)) {
    list(,, $bundle) = entity_extract_ids($entity_type, $entity);
    // @TODO Cache field_extra_fields_get_display()?
    $extra_fields = field_extra_fields_get_display($entity_type, $bundle, $view_mode);
    foreach ($extra_fields as $extra_key => $extra_info) {
      if (strpos($extra_key, 'eba_') === 0) {
        if (!empty($extra_fields[$extra_key]['visible'])) {
          list($module, $delta) = explode('-', substr($extra_key, 4), 2);
          // @TODO Respect block visibility settings.
          if ($block = eba_get_block($module, $delta)) {
            $build[$extra_key] = $block;
            $build[$extra_key]['#weight'] = $extra_fields[$extra_key]['weight'];
            $build[$extra_key]['#eba_entity'] = $entity;
            $build[$extra_key]['#eba_entity_type'] = $entity_type;
          }
        }
      }
    }
  }
  // If we didn't find the entity in the build array, let the user know.
  else {
    watchdog('eba', t('EBA could not find the entity in its build array. Block was not attached to entity of type %type', array('%type' => $entity_type)), WATCHDOG_WARNING);
  }
}

/**
 * Extract an actual entity object from its $build array.
 *
 * This is a bit more complicated than it should be, since core entities, contrib
 * entities, and contrib entities based on EntityAPI all store their junk in
 * different slots of the build array. See http://drupal.org/node/1170198 and
 * https://drupal.org/node/1772204.
 *
 * @param $build
 *   A renderable array representing the entity content.
 * @param $entity_type
 *   The type of entity being rendered (i.e. node, user, comment).
 *
 * @TODO Cache this?
 */
function _eba_extract_entity_from_build($build, $entity_type = NULL) {
  $build_paths = array(
    'user' => '#account',
    'taxonomy_term' => '#term',
  );
  drupal_alter('eba_build_path', $build_paths);

  if (!empty($build_paths[$entity_type])) {
    return $build[$build_paths[$entity_type]];
  }
  // EntityAPI often sticks stuff in here.
  else if (!empty($build['#entity'])) {
    return $build['#entity'];
  }
  // Other entities stick them here!
  elseif (!empty($build['#' . $entity_type])) {
    return $build['#' . $entity_type];
  }

  return FALSE;
}

/**
 * Retrieve the render array representation for the given block.
 *
 * @param $module
 *   The module that provides the block.
 * @param $delta
 *   The block delta.
 *
 * @return array|null
 *   A render array, suitable for passing to render(). If no block is
 *   available, NULL is returned.
 */
function eba_get_block($module, $delta) {
  $block = block_load($module, $delta);
  $block->region = isset($block->region) ? $block->region : NULL;
  if ($blocks = _block_render_blocks(array($block))) {
    return _block_get_renderable_array(array_values($blocks));
  }
  return NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eba_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  list($module, $delta) = $form_state['build_info']['args'];
  $config = eba_config_load($module, $delta);

  $entity_info = entity_get_info();
  $options = array();
  foreach ($entity_info as $entity_type => $entity_type_info) {
    $entity_type_label = empty($entity_type_info['label']) ? $entity_type : $entity_type_info['label'];
    $bundle_label = empty($entity_type_info['bundle label']) ? t('@entity_type bundle', array('@entity_type' => $entity_type_label)) : $entity_type_info['bundle label'];
    $options[$entity_type_label][EBA_ALL_BUNDLES] = t('Any @bundle_label', array('@bundle_label' => $bundle_label));
    foreach ($entity_type_info['bundles'] as $bundle => $bundle_info) {
      $options[$entity_type_label][$bundle] = $bundle_info['label'];
    }
  }

  $form['visibility']['eba'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entity Block Attachment'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 30,
  );
  $form['visibility']['eba']['eba_config'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Entity bundles to display this block on'),
    '#options' => $options,
    '#description' => t('Manage the display of this block in the \'Manage display\' interface for each entity/bundle, provided by the Field UI module. Note that once a block is set to display on a type/bundle, it will instantly appear on all view modes of any entity of that type/bundle unless hidden through the Field UI.'),
    '#default_value' => $config ? $config->bundles : array(),
  );
  $form['visibility']['eba']['eba_respect_visibility'] = array(
    '#type' => 'checkbox',
    '#title' => t('Respect block visibility settings'),
    '#default_value' => $config ? $config->respect_visibility : array(),
    '#description' => t('Only display the block on entities if it is not restricted by other visibility settings.'),
  );

  // The block configure form does not explicitly set its submission handler, so
  // add it if necessary before our handler to $form['#submit'], or to the
  // submit button if other modules have added submit callbacks to that.
  if (isset($form['actions']['submit']['#submit'])) {
    $form['actions']['submit']['#submit'][] = 'eba_form_block_admin_configure_submit';
  }
  if (!isset($form['#submit'])) {
    $form['#submit'][] = 'block_admin_configure_submit';
  }
  $form['#submit'][] = 'eba_form_block_admin_configure_submit';
}

/**
 * Additional submission callback for the block configuration form.
 */
function eba_form_block_admin_configure_submit($form, &$form_state) {
  $module = $form_state['values']['module'];
  $delta = $form_state['values']['delta'];
  $config = eba_config_load($module, $delta);

  if (isset($form_state['values']['eba_config'])) {
    if (empty($form_state['values']['eba_config'])) {
      if ($config) {
        eba_config_delete($module, $delta);
      }
    }
    else {
      $config = array(
        'module' => $module,
        'delta' => $delta,
        'bundles' => $form_state['values']['eba_config'],
        'respect_visibility' => $form_state['values']['eba_respect_visibility'],
      );
      eba_config_save($config);
    }

    field_cache_clear();
  }
}
